version: "3.9"

x-env-common: &env-common
  SPRING_CONFIG_IMPORT: optional:configserver:http://config-server:8888
  EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service-discovery:8761/eureka/
  MYSQL_URL_JDBC: jdbc:mysql://mysql:3306/
  SPRING_CLOUD_CONFIG_FAIL_FAST: "true"
  SPRING_CLOUD_CONFIG_RETRY_MAX_ATTEMPTS: "12"
  SPRING_CLOUD_CONFIG_RETRY_INITIAL_INTERVAL: "2000"
  MYSQL_ACCOUNT: root
  #redis
  REDIS_URL: redis://redis:6379
  SPRING_DATA_REDIS_HOST: redis
  SPRING_DATA_REDIS_PORT: "6379"
  # ==== Tracing to Zipkin (Spring Boot 3 / Micrometer Tracing) ====
  MANAGEMENT_ZIPKIN_TRACING_ENDPOINT: http://zipkin:9411/api/v2/spans
  MANAGEMENT_TRACING_SAMPLING_PROBABILITY: "1.0"

x-depends-common: &depends-common
  config-server:
    condition: service_healthy
  eureka-service-discovery:
    condition: service_healthy

networks:
  hms-net:

volumes:
  mysql_data:
  redis_data:

services:
  mysql:
    image: mysql:8.0
    container_name: mysql
    command: --default-authentication-plugin=mysql_native_password --lower_case_table_names=1
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: hms
      MYSQL_USER: hms
      MYSQL_PASSWORD: hms
    ports: [ "3306:3306" ]
    volumes:
      - mysql_data:/var/lib/mysql
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost"]
      interval: 10s
      timeout: 5s
      retries: 20
    networks: [hms-net]

  zipkin:
    image: openzipkin/zipkin:2.24
    container_name: zipkin
    ports: [ "9411:9411" ]
    # environment:
    #   - STORAGE_TYPE=mysql
    #   - MYSQL_HOST=mysql
    #   - MYSQL_TCP_PORT=3306
    #   - MYSQL_DB=zipkin
    #   - MYSQL_USER=hms
    #   - MYSQL_PASS=hms
    # depends_on:
    #   mysql:
    #     condition: service_healthy
    healthcheck:
      test: [ "CMD-SHELL", "wget -qO- http://localhost:9411/health | grep -q 'UP' || exit 1" ]
      interval: 10s
      timeout: 5s
      retries: 30
    networks: [ hms-net ]

  redis:
    image: redis/redis-stack-server:latest
    container_name: redis
    ports: [ "6379:6379" ]
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD-SHELL", "redis-cli -h 127.0.0.1 -p 6379 ping | grep -q PONG" ]
      interval: 10s
      timeout: 5s
      retries: 30
    networks: [ hms-net ]

  # Eureka STARTS FIRST
  eureka-service-discovery:
    build:
      context: ./eureka-service-discovery
      dockerfile: Dockerfile
    container_name: eureka-service-discovery
    environment:
      SPRING_APPLICATION_NAME: eureka-service-discovery
      SERVER_PORT: 8761
    ports: [ "8761:8761" ]
    healthcheck:
      test: ["CMD-SHELL", "wget -qO- http://localhost:8761/actuator/health | grep -q '\"status\":\"UP\"' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks: [hms-net]

  config-server:
    build:
      context: ./config-server
      dockerfile: Dockerfile
    container_name: config-server
    environment:
      SERVER_PORT: 8888
      SPRING_PROFILES_ACTIVE: native
      SPRING_CLOUD_CONFIG_SERVER_NATIVE_SEARCH_LOCATIONS: file:/config-repo
      EUREKA_CLIENT_SERVICEURL_DEFAULTZONE: http://eureka-service-discovery:8761/eureka
    volumes:
      - ./config-repo:/config-repo:ro
    ports: [ "8888:8888" ]
    depends_on:
      eureka-service-discovery:
        condition: service_healthy
    healthcheck:
      test: ["CMD-SHELL", "curl -fsS http://localhost:8888/actuator/health | grep -q '\"status\":\"UP\"' || exit 1"]
      interval: 10s
      timeout: 5s
      retries: 30
    networks: [hms-net]

  api-gateway:
    build: { context: ./api-gateway, dockerfile: Dockerfile }
    container_name: api-gateway
    environment:
      <<: *env-common
      SPRING_APPLICATION_NAME: api-gateway
      SERVER_PORT: 8090
    depends_on: *depends-common
    ports: [ "8090:8090" ]
    networks: [hms-net]

  patient-service:
    build: { context: ./patient-service, dockerfile: Dockerfile }
    container_name: patient-service
    environment:
      <<: *env-common
      SPRING_APPLICATION_NAME: patient-service
      SERVER_PORT: 8092
    depends_on:
      <<: *depends-common
      mysql:
        condition: service_healthy
    ports: [ "8092:8092" ]
    networks: [hms-net]

  doctor-service:
    build: { context: ./doctor-service, dockerfile: Dockerfile }
    container_name: doctor-service
    environment:
      <<: *env-common
      SPRING_APPLICATION_NAME: doctor-service
      SERVER_PORT: 8093
    depends_on:
      <<: *depends-common
      mysql:
        condition: service_healthy
    ports: [ "8093:8093" ]
    networks: [hms-net]

  notification-service:
    build: { context: ./notification-service, dockerfile: Dockerfile }
    container_name: notification-service
    environment:
      <<: *env-common
      SPRING_APPLICATION_NAME: notification-service
      SERVER_PORT: 8097
    depends_on:
      <<: *depends-common
      mysql:
        condition: service_healthy
    ports: [ "8097:8097" ]
    networks: [hms-net]

  community-portal-service:
    build: { context: ./community-portal-service, dockerfile: Dockerfile }
    container_name: community-portal-service
    environment:
      <<: *env-common
      SPRING_APPLICATION_NAME: community-portal-service
      SERVER_PORT: 8094
    depends_on: *depends-common
    ports: [ "8094:8094" ]
    networks: [hms-net]

  analytic-research-service:
    build: { context: ./analytic-research-service, dockerfile: Dockerfile }
    container_name: analytic-research-service
    environment:
      <<: *env-common
      SPRING_APPLICATION_NAME: analytic-research-service
      SERVER_PORT: 8098
    depends_on:
      <<: *depends-common
      mysql:
        condition: service_healthy
    ports: [ "8098:8098" ]
    networks: [hms-net]

  cdss-service:
    build: { context: ./cdss-service, dockerfile: Dockerfile }
    container_name: cdss-service
    environment:
      <<: *env-common
      SPRING_APPLICATION_NAME: cdss-service
      SERVER_PORT: 8095
    depends_on:
      <<: *depends-common
      mysql:
        condition: service_healthy
    ports: [ "8095:8095" ]
    networks: [hms-net]

  pharmaceutical-inventory-service:
    build: { context: ./pharmaceutical-inventory-service, dockerfile: Dockerfile }
    container_name: pharmaceutical-inventory-service
    environment:
      <<: *env-common
      SPRING_APPLICATION_NAME: pharmaceutical-inventory-service
      SERVER_PORT: 8096
    depends_on:
      <<: *depends-common
      mysql:
        condition: service_healthy
    ports: [ "8096:8096" ]
    networks: [hms-net]

  security-service:
    build: { context: ./security-service, dockerfile: Dockerfile }
    container_name: security-service
    environment:
      <<: *env-common
      SPRING_APPLICATION_NAME: security-service
      SERVER_PORT: 8091
    depends_on: *depends-common
    ports: [ "8091:8091" ]
    networks: [hms-net]
